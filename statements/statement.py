import re


class Statement:
    def __init__(self, readable_regex, state_updater):
        """Initializes a statement to match lines with
            the provided 'readable_regex'. If a match
            is found, 'state_updater' is invoked with
            the Compiler state and Match parameters
        """
        self.regex = self.recompile(readable_regex)
        self.state_updater = state_updater

    def update_if_match(self, line, compiler_state):
        """If 'line' matches this statement's regex,
            the 'compiler_state' will be updated with the
            code generated by this statement.

            Returns True if the 'compiler_state' was updated.
        """
        m = self.regex.match(line)
        if m:
            self.state_updater(compiler_state, m)
            return True
        else:
            return False

    @staticmethod
    def recompile(string):
        """Used to compile "readable" regexes, with the following changes:
            '^' and '$' will be prepended and appended, respectively

            'VALUE' will be replaced with '[\w\d]+' to match registers/numbers

            ' ' (one space) will be replaced with r'\s*'
            '  ' (two spaces) will be replaced with r'\s+'

            '(?:\s*@(\w+))?' will be added to the end to allow @labelname
        """
        sanitized = string.replace('VALUE', r'[\w\d]+')
        sanitized = sanitized.replace('  ', r'\s+').replace(' ', r'\s*')
        sanitized = sanitized + r'(?:\s*@(\w+))?'
        return re.compile('^' + sanitized + '$')
